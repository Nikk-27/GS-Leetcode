class Solution:
    def islandsAndTreasure(self, grid: List[List[int]]) -> None:
        rows = len(grid)
        cols = len(grid[0])
        directions = [(-1, 0), (1, 0), (0, 1), (0, -1)]
        visit = set()
        q = deque()

        def addroom(nr, nc):
            if nr < 0 or nc < 0 or nr >= rows or nc >= cols or (nr, nc) in visit or grid[nr][nc] == -1:
                return
            visit.add((nr, nc))
            q.append((nr, nc))


        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 0:
                    visit.add((i, j))
                    q.append((i, j))
        
        dist = 0

        while q:
            for k in range(len(q)):
                r, c = q.popleft()
                grid[r][c] = dist
                for rr, cc in directions:
                    nr, nc = r+rr, c+cc
                    addroom(nr, nc)
            dist += 1

# TC = O(m*n)
# SC = O(m*n)
